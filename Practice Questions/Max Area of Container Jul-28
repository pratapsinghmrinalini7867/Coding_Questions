//FIRST SOLUTION
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxarea = 0;
        int n = height.size();
        for(int i=0;i<n-1;i++){ 
           for(int j=n-1;j>=i+1;j--){
      /*if(height[i]<height[j])
           h = height[i];
       else
           h = height[j];

        l = j - i;
        if(max < h*l)
           max = h*l;
        }*/
       int area = (j-i) * min(height[i],height[j]);
       maxarea = max(maxarea,area);
        }
     }
      return(maxarea);
    
   }
};

//SECOND SOLUTION
class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxArea = 0;
        int n = height.size();
        int left =0;
        int right = height.size()-1;
       while(left < right) {
           int ar = (right-left) * min(height[left],height[right]);
           maxArea = max(maxArea,ar);
           if(height[left] < height[right])
               left++;
           else if(height[left] > height[right])
               right--;
           else {
               left++;
               right--;
           }
       }
        return maxArea;
    }
};




