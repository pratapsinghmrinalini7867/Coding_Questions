//SOLUTION 1
class Solution {
public:
    int minStoneSum(vector<int>& piles, int k) {
        int max,index,sum=0, n = piles.size();
        while(k!=0){
            sort(piles.begin(),piles.end());
            piles[n-1] -= floor(piles[n-1]/2);
            k--;
        }        
        for(int i=0;i<n;i++)
            sum += piles[i];

        return(sum);
        
        
//SOLUTION 2
class Solution {
public:
    int minStoneSum(vector<int>& piles, int k) {
        int n = piles.size();
        int sum = 0,max,index;
        while(k!=0){
            max = piles[n-1];
            index = n-1;
            for(int i=n-1;i>=0;i--){
                if(piles[i]>piles[i-1]){
                    max = piles[i];  
                    index = i;
                    break;
                }
                else
                    continue;
            }
            piles[index] -= floor(max/2);
            k--;
        }
        return(sum);
    }
 };
        
//SOLUTION 3
class Solution {
public:
    int minStoneSum(vector<int>& piles, int k) {
        int n = piles.size();
        int sum = 0,max,index;
        while(k!=0){
            max = piles[0];
            index = 0;
            for(int j=0;j<n;j++){
                if(max<piles[j]){
                    max = piles[j];
                    index = j;
                }
            }
             piles[index] -= floor(max/2);
             k--;
        }
        for(int i=0;i<n;i++){
            sum += piles[i];
        }
        return(sum);
    }
};
